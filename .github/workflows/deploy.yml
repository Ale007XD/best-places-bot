# Название рабочего процесса, которое будет отображаться в GitHub Actions
name: Deploy Telegram Bot to VPS

# Триггер: этот процесс будет запускаться автоматически
# при каждом пуше в ветку 'main'
on:
  push:
    branches: [ main ]

# Описание всех задач (jobs)
jobs:
  deploy:
    # Задача выполняется на последней Ubuntu
    runs-on: ubuntu-latest

    steps:
      # Подключаемся к серверу через SSH и выполняем деплой-скрипт
      - name: Connect to VPS and Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          # Параметры подключения к серверу
          host: ${{ secrets.VPS_HOST }}           # IP или hostname VPS
          username: ${{ secrets.VPS_USERNAME }}   # имя пользователя на сервере
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }} # приватный ключ для SSH-подключения
          
          # Shell-скрипт для запуска на сервере
          script: |
            # --- Безопасный режим (остановка при ошибке)
            set -e

            # --- Подготовка ---
            # Указываем домашнюю директорию и путь к проекту (замените deploy при необходимости!)
            HOME_DIR="/home/${USER:-deploy}"
            PROJECT_DIR="$HOME_DIR/best-places-bot"

            # --- Обновление или первоначальная загрузка кода ---
            if [ -d "$PROJECT_DIR" ]; then
              echo ">>> Project directory exists. Pulling latest changes..."
              cd "$PROJECT_DIR"
              git pull origin main
            else
              echo ">>> Project directory does not exist. Cloning repository..."
              cd "$HOME_DIR"
              git clone git@github.com:Ale007XD/best-places-bot.git best-places-bot
              cd "$PROJECT_DIR"
            fi

            # --- Создание .env файла ---
            echo ">>> Creating .env file..."
            echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" > .env
            echo "GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}" >> .env
            echo "ADMIN_ID=${{ secrets.ADMIN_ID }}" >> .env

            # --- Запуск через Docker Compose ---
            echo ">>> Building and starting Docker container..."
            docker compose up --build -d

            # --- Очистка старых Docker-образов ---
            echo ">>> Pruning old Docker images..."
            docker image prune -f

            echo ">>> Deployment successful!"

