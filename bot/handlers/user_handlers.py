# bot/handlers/user_handlers.py
# -*- coding: utf-8 -*-
"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ aiogram:
- –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ‚Üí –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ ‚Üí —Ä–∞–¥–∏—É—Å–∞ ‚Üí —Ä–µ–π—Ç–∏–Ω–≥–∞.
- –í—ã–∑–æ–≤ –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç —á–µ—Ä–µ–∑ Google Places —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
- –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π.

–ö–ª—é—á–µ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
- –í—ã–∑–æ–≤ find_places –ø—Ä–∏–≤–µ–¥—ë–Ω –∫ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ
  find_places(_, api_key, lat, lon, radius, min_rating, max_rating, lang_code)
  —á—Ç–æ–±—ã —É—Å—Ç—Ä–∞–Ω–∏—Ç—å TypeError –∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–∑–∏—Ü–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
"""

import logging
from typing import Tuple, Optional

import redis.asyncio as redis
from aiogram import Router, F, types, Bot
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, CallbackQuery

from bot.utils.geospatial import calculate_distance, calculate_bearing, bearing_to_direction
from bot.keyboards import inline_keyboards
from bot.utils.google_maps_api import find_places
from bot.config import settings
from bot.services.translator import get_string

router = Router()


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---

class SearchSteps(StatesGroup):
    waiting_for_language = State()
    waiting_for_location = State()
    waiting_for_radius = State()
    waiting_for_manual_radius = State()
    waiting_for_rating = State()
    waiting_for_manual_rating = State()


class FeedbackState(StatesGroup):
    waiting_for_feedback = State()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def _t(lang_code: str):
    """
    –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ø—Ä–æ–∫–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞.
    """
    return lambda key: get_string(key, lang=lang_code)


def _format_place_card(
    lang_code: str,
    user_lat: float,
    user_lon: float,
    place: dict,
) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Å—Ç–∞ —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.
    """
    name = place.get("name", "‚Äî")
    rating = place.get("rating", "‚Äî")
    ratings_total = place.get("user_ratings_total", 0)
    vicinity = place.get("vicinity") or "‚Äî"
    plat = place.get("lat")
    plon = place.get("lon")

    # –ì–µ–æ–º–µ—Ç—Ä–∏—è
    distance_m = "‚Äî"
    direction_txt = "‚Äî"
    if plat is not None and plon is not None:
        dist = calculate_distance(user_lat, user_lon, float(plat), float(plon))
        brg = calculate_bearing(user_lat, user_lon, float(plat), float(plon))
        direction_txt = bearing_to_direction(_t(lang_code), brg)
        distance_m = f"{dist} –º"

    return (
        f"üìç <b>{name}</b>\n"
        f"‚≠êÔ∏è {rating} ({int(ratings_total)})\n"
        f"üß≠ {distance_m} ‚Ä¢ {direction_txt}\n"
        f"üó∫ {vicinity}"
    )


async def process_and_send_results(
    chat_id: int,
    bot: Bot,
    state: FSMContext,
    min_rating: float,
    max_rating: float,
    _,
    lang_code: str,
) -> None:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –º–µ—Å—Ç –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∏–∑ FSM –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    –ö–ª—é—á–µ–≤–æ–µ: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ find_places —Å –Ω—É–∂–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
    """
    user_data = await state.get_data()
    lat = float(user_data["latitude"])
    lon = float(user_data["longitude"])
    radius = int(user_data["radius"])

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    logging.info(
        "Searching places: lat=%s lon=%s radius=%s min_rating=%s max_rating=%s lang=%s",
        lat, lon, radius, min_rating, max_rating, lang_code
    )

    # –í–ê–ñ–ù–û: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∏ –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    all_candidates = await find_places(
        _,
        api_key=settings.GOOGLE_MAPS_API_KEY,
        lat=lat,
        lon=lon,
        radius=radius,
        min_rating=min_rating,
        max_rating=max_rating,
        lang_code=lang_code,
    )

    logging.info("Places fetched: %s before final sorting/capping", len(all_candidates))

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ü–µ–Ω–æ–∫ (—Å—Ç–∞–±–∏–ª—å–Ω–µ–µ)
    all_candidates.sort(
        key=lambda p: (
            float(p.get("rating") or 0.0),
            int(p.get("user_ratings_total") or 0),
        ),
        reverse=True,
    )

    # –ë–µ—Ä—ë–º —Ç–æ–ø-3
    top = all_candidates[:3]

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if not top:
        await bot.send_message(
            chat_id,
            get_string("no_results", lang=lang_code) + "\n" + get_string("try_another_range", lang=lang_code),
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    for p in top:
        text = _format_place_card(lang_code, lat, lon, p)
        await bot.send_message(chat_id, text, parse_mode="HTML")


# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–∏–∞–ª–æ–≥–∞ ---

@router.message(CommandStart())
async def handle_start(message: Message, state: FSMContext):
    """
    –°—Ç–∞—Ä—Ç: –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    await state.set_state(SearchSteps.waiting_for_language)
    await message.answer(
        get_string("select_language", lang="ru"),
        reply_markup=inline_keyboards.get_language_keyboard(),
    )


@router.callback_query(F.data.startswith("lang_"))
async def set_language(callback: CallbackQuery, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏ –ø—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é.
    """
    lang_code = callback.data.split("_", 1)[1]
    await state.update_data(lang_code=lang_code)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
    kb = ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[[KeyboardButton(text=get_string("send_location_btn", lang=lang_code), request_location=True)]],
        one_time_keyboard=True,
    )

    await callback.message.answer(get_string("request_location", lang=lang_code), reply_markup=kb)
    await state.set_state(SearchSteps.waiting_for_location)
    await callback.answer()


@router.message(F.location, SearchSteps.waiting_for_location)
async def got_location(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å —Ä–∞–¥–∏—É—Å.
    """
    data = await state.get_data()
    lang_code = data.get("lang_code", "ru")

    await state.update_data(latitude=message.location.latitude, longitude=message.location.longitude)
    await message.answer(get_string("select_radius", lang=lang_code), reply_markup=ReplyKeyboardRemove())
    await message.answer(get_string("thanks", lang=lang_code), reply_markup=inline_keyboards.get_radius_keyboard(_t(lang_code)))
    await state.set_state(SearchSteps.waiting_for_radius)


@router.callback_query(F.data.startswith("radius_"), SearchSteps.waiting_for_radius)
async def set_radius(callback: CallbackQuery, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ä–∞–¥–∏—É—Å –∏ –ø–µ—Ä–µ–π–¥—ë–º –∫ –≤—ã–±–æ—Ä—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞.
    """
    data = await state.get_data()
    lang_code = data.get("lang_code", "ru")

    # radius_200 | radius_500 | radius_1000
    radius = int(callback.data.split("_", 1)[1])
    await state.update_data(radius=radius)

    await callback.message.answer(get_string("select_rating_range", lang=lang_code), reply_markup=inline_keyboards.get_rating_keyboard(_t(lang_code)))
    await state.set_state(SearchSteps.waiting_for_rating)
    await callback.answer()


@router.callback_query(F.data.startswith("rating_"), SearchSteps.waiting_for_rating)
async def get_rating_from_button(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∞–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –∑–∞–ø—É—Å—Ç–∏–º –ø–æ–∏—Å–∫.
    """
    data = await state.get_data()
    lang_code = data.get("lang_code", "ru")

    # rating_4.5_4.79
    _, min_s, max_s = callback.data.split("_")
    min_rating = float(min_s)
    max_rating = float(max_s)

    # –°–æ–æ–±—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∏—â–µ–º
    await callback.message.answer(get_string("searching", lang=lang_code))

    # –í—ã–∑–æ–≤ –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await process_and_send_results(callback.message.chat.id, callback.bot, state, min_rating, max_rating, _t(lang_code), lang_code)
    await callback.answer()


# –ù–∏–∂–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ä–∞–¥–∏—É—Å–∞ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞, –∫–æ–º–∞–Ω–¥–∞ /feedback –∏ —Ç.–¥.
# –õ–æ–≥–∏–∫–∞ –∏—Ö –Ω–µ –º–µ–Ω—è–ª–∞—Å—å, –∫–ª—é—á–µ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–∑–æ–≤ find_places.
