from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from bot.keyboards import inline_keyboards
from bot.utils.google_maps_api import find_places
from bot.config import settings

router = Router()

class SearchSteps(StatesGroup):
    waiting_for_location = State()
    waiting_for_radius = State()
    waiting_for_rating = State()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    # ... —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    await state.clear()
    location_button = KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)
    keyboard = ReplyKeyboardMarkup(keyboard=[[location_button]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø "–ì–∏–¥ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º". –ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º —Å –≤–∞–º–∏.\n\n'
        '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.',
        reply_markup=keyboard
    )
    await state.set_state(SearchSteps.waiting_for_location)


@router.message(SearchSteps.waiting_for_location, F.location)
async def get_location(message: Message, state: FSMContext):
    # ... —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    await state.update_data(latitude=message.location.latitude, longitude=message.location.longitude)
    await message.answer("–°–ø–∞—Å–∏–±–æ!", reply_markup=ReplyKeyboardRemove())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:", reply_markup=inline_keyboards.get_radius_keyboard())
    await state.set_state(SearchSteps.waiting_for_radius)


@router.callback_query(SearchSteps.waiting_for_radius, F.data.startswith('radius_'))
async def get_radius(callback: types.CallbackQuery, state: FSMContext):
    # ... —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    radius = int(callback.data.split('_')[1])
    await state.update_data(radius=radius)
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ. –ö–∞–∫–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=inline_keyboards.get_rating_keyboard()
    )
    await state.set_state(SearchSteps.waiting_for_rating)
    await callback.answer()


@router.callback_query(SearchSteps.waiting_for_rating, F.data.startswith('rating_'))
async def get_rating_and_search(callback: types.CallbackQuery, state: FSMContext):
    """
    –õ–æ–≤–∏—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –î–ò–ê–ü–ê–ó–û–ù–û–ú —Ä–µ–π—Ç–∏–Ω–≥–∞, –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê –î–ò–ê–ü–ê–ó–û–ù–ê ---
    parts = callback.data.split('_')
    min_rating = float(parts[1])
    max_rating = float(parts[2])
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

    user_data = await state.get_data()
    await state.clear()
    
    await callback.message.edit_text("–ò—â—É –ª—É—á—à–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –≤–∞—Å... üïµÔ∏è‚Äç‚ôÇÔ∏è")
    
    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –í–´–®–ï –Ω–∞—à–µ–≥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
    all_candidates = await find_places(
        api_key=settings.GOOGLE_MAPS_API_KEY,
        lat=user_data['latitude'],
        lon=user_data['longitude'],
        radius=user_data['radius'],
        min_rating=min_rating # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
    )
    
    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û –í–ï–†–•–ù–ï–ô –ì–†–ê–ù–ò–¶–ï ---
    final_places = []
    for place in all_candidates:
        if place['rating'] <= max_rating:
            final_places.append(place)
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

    await callback.message.delete()
    
    # –¢–µ–ø–µ—Ä—å –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∞—à–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–º, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
    if not final_places:
        await callback.message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. üôÅ\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω. –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ /start"
        )
    else:
        await callback.message.answer("–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:")
        
        # –ë–µ—Ä–µ–º –¥–æ 3-—Ö –ª—É—á—à–∏—Ö –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        for place in final_places[:3]:
            text = (
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {place['name']}\n"
                f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> ‚≠êÔ∏è {place['rating']}\n"
                f"<b>–ê–¥—Ä–µ—Å:</b> {place['address']}"
            )
            await callback.message.answer(
                text,
                parse_mode="HTML",
                reply_markup=inline_keyboards.get_google_maps_link_button(
                    place_id=place['place_id'], 
                    place_name=place['name']
                )
            )
            
        await callback.message.answer("–•–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫? /start")

    await callback.answer()


@router.message(SearchSteps.waiting_for_location)
async def incorrect_location(message: Message):
    # ... —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é', —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º.")
