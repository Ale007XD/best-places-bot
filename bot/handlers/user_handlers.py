from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from bot.utils.geospatial import calculate_distance, calculate_bearing, bearing_to_direction
from bot.keyboards import inline_keyboards
from bot.utils.google_maps_api import find_places
from bot.config import settings

router = Router()

# --- –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –†–£–ß–ù–û–ì–û –í–í–û–î–ê ---
class SearchSteps(StatesGroup):
    waiting_for_location = State()
    waiting_for_radius = State()
    waiting_for_manual_radius = State() # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    waiting_for_rating = State()
    waiting_for_manual_rating = State() # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ---
# –ú—ã –≤—ã–Ω–æ—Å–∏–º —ç—Ç–æ—Ç –±–ª–æ–∫, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
async def process_and_send_results(message: Message, state: FSMContext, min_rating: float, max_rating: float):
    user_data = await state.get_data()
    await state.clear()
    
    await message.edit_text("–ò—â—É –ª—É—á—à–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –≤–∞—Å... üïµÔ∏è‚Äç‚ôÇÔ∏è")
    
    all_candidates = await find_places(
        api_key=settings.GOOGLE_MAPS_API_KEY,
        lat=user_data['latitude'],
        lon=user_data['longitude'],
        radius=user_data['radius'],
        min_rating=min_rating
    )
    
    final_places = [p for p in all_candidates if p['rating'] <= max_rating]

    await message.delete()
    
    if not final_places:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. üôÅ\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω. –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ /start"
        )
    else:
        await message.answer("–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:")
        for i, place in enumerate(final_places[:3], 1):
            distance = calculate_distance(user_data['latitude'], user_data['longitude'], place['lat'], place['lng'])
            bearing = calculate_bearing(user_data['latitude'], user_data['longitude'], place['lat'], place['lng'])
            direction = bearing_to_direction(bearing)
            text = (
                f"<b>{i}. {place['name']}</b>\n"
                f"üçΩÔ∏è {place['main_type']}\n"
                f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {place['rating']}\n"
                f"üìç {distance} –º {direction} –æ—Ç –≤–∞—Å\n"
                f"üó∫Ô∏è –ê–¥—Ä–µ—Å: {place['address']}"
            )
            await message.answer(
                text,
                parse_mode="HTML",
                reply_markup=inline_keyboards.get_google_maps_link_button(
                    place_id=place['place_id'], 
                    place_name=place['name']
                )
            )
        await message.answer("–•–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫? /start")


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –û–°–ù–û–í–ù–û–ì–û –°–¶–ï–ù–ê–†–ò–Ø ---

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    # ... –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    await state.clear()
    location_button = KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)
    keyboard = ReplyKeyboardMarkup(keyboard=[[location_button]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø "–ì–∏–¥ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º"...', reply_markup=keyboard)
    await state.set_state(SearchSteps.waiting_for_location)


@router.message(SearchSteps.waiting_for_location, F.location)
async def get_location(message: Message, state: FSMContext):
    # ... –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    await state.update_data(latitude=message.location.latitude, longitude=message.location.longitude)
    await message.answer("–°–ø–∞—Å–∏–±–æ!", reply_markup=ReplyKeyboardRemove())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:", reply_markup=inline_keyboards.get_radius_keyboard())
    await state.set_state(SearchSteps.waiting_for_radius)


@router.callback_query(SearchSteps.waiting_for_radius, F.data.startswith('radius_'))
async def get_radius(callback: types.CallbackQuery, state: FSMContext):
    # ... –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    radius = int(callback.data.split('_')[1])
    await state.update_data(radius=radius)
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ. –ö–∞–∫–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=inline_keyboards.get_rating_keyboard()
    )
    await state.set_state(SearchSteps.waiting_for_rating)
    await callback.answer()


@router.callback_query(SearchSteps.waiting_for_rating, F.data.startswith('rating_'))
async def get_rating_from_button(callback: types.CallbackQuery, state: FSMContext):
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    parts = callback.data.split('_')
    min_rating = float(parts[1])
    max_rating = float(parts[2])
    await process_and_send_results(callback.message, state, min_rating, max_rating)
    await callback.answer()

# --- –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–£–ß–ù–û–ì–û –í–í–û–î–ê ---

@router.callback_query(SearchSteps.waiting_for_radius, F.data == 'manual_radius_input')
async def ask_for_manual_radius(callback: types.CallbackQuery, state: FSMContext):
    """–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É '–í–≤–µ—Å—Ç–∏ —Ä–∞–¥–∏—É—Å –≤—Ä—É—á–Ω—É—é'."""
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–¥–∏—É—Å –≤ –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 350, –º–∞–∫—Å. 5000).")
    await state.set_state(SearchSteps.waiting_for_manual_radius)
    await callback.answer()


@router.message(SearchSteps.waiting_for_manual_radius)
async def get_manual_radius(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–∞–¥–∏—É—Å, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≤—Ä—É—á–Ω—É—é."""
    try:
        radius = int(message.text)
        if not 1 <= radius <= 5000:
            raise ValueError("–†–∞–¥–∏—É—Å –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        
        await state.update_data(radius=radius)
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ. –ö–∞–∫–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            reply_markup=inline_keyboards.get_rating_keyboard()
        )
        await state.set_state(SearchSteps.waiting_for_rating)

    except (ValueError, TypeError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5000.")


@router.callback_query(SearchSteps.waiting_for_rating, F.data == 'manual_rating_input')
async def ask_for_manual_rating(callback: types.CallbackQuery, state: FSMContext):
    """–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É '–í–≤–µ—Å—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ –≤—Ä—É—á–Ω—É—é'."""
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3.2 –∏–ª–∏ 4).")
    await state.set_state(SearchSteps.waiting_for_manual_rating)
    await callback.answer()


@router.message(SearchSteps.waiting_for_manual_rating)
async def get_manual_rating(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≤—Ä—É—á–Ω—É—é."""
    try:
        # –î–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –º—ã –∏—â–µ–º –≤—Å–µ, —á—Ç–æ –í–´–®–ï —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
        min_rating = float(message.text.replace(',', '.')) # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
        max_rating = 5.0 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å–µ–≥–¥–∞ 5.0
        
        if not 1.0 <= min_rating <= 5.0:
            raise ValueError("–†–µ–π—Ç–∏–Ω–≥ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        # –ù–æ –µ–π –Ω—É–∂–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø–æ—ç—Ç–æ–º—É —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        sent_message = await message.answer("–ü—Ä–∏–Ω—è—Ç–æ!")
        await process_and_send_results(sent_message, state, min_rating, max_rating)
    
    except (ValueError, TypeError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1.0 –¥–æ 5.0.")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ---
@router.message(SearchSteps.waiting_for_location)
async def incorrect_location(message: Message):
    # ... –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é'...")
