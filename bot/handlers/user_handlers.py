import logging
from aiogram import Router, F, types, Bot
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from bot.utils.geospatial import calculate_distance, calculate_bearing, bearing_to_direction
from bot.keyboards import inline_keyboards
from bot.utils.google_maps_api import find_places
from bot.utils.analytics import Analytics # <-- –ò–º–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
from bot.config import settings

router = Router()
analytics = Analytics() # <-- –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class SearchSteps(StatesGroup):
    waiting_for_location = State()
    waiting_for_radius = State()
    waiting_for_manual_radius = State()
    waiting_for_rating = State()
    waiting_for_manual_rating = State()

class FeedbackState(StatesGroup):
    waiting_for_feedback = State()


# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
@router.message(Command(commands=['stats']), F.from_user.id == settings.ADMIN_ID)
async def cmd_stats(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç—á–µ—Ç –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è."""
    stats = await analytics.get_today_stats()
    
    radius_stats = "\n".join([f"  - {k} –º: {v} —Ä–∞–∑" for k, v in stats['radius_usage'].items()]) or "  - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    rating_stats = "\n".join([f"  - {k.replace('_', ' - ')}: {v} —Ä–∞–∑" for k, v in stats['rating_usage'].items()]) or "  - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n"
        f"üë§ *–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {stats['active_users']}\n"
        f"üîç *–í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤:* {stats['searches']}\n"
        f"ü§∑ *'–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ':* {stats['empty_results']}\n"
        f"üí° *–ó–∞–ø—Ä–æ—Å–æ–≤ —Ñ–∏–¥–±—ç–∫–∞:* {stats['feedback']}\n\n"
        f"*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–∏—á:*\n"
        f"–†–∞–¥–∏—É—Å—ã:\n{radius_stats}\n\n"
        f"–†–µ–π—Ç–∏–Ω–≥–∏:\n{rating_stats}"
    )
    await message.answer(text, parse_mode="Markdown")


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ ---
async def process_and_send_results(chat_id: int, bot: Bot, state: FSMContext, min_rating: float, max_rating: float):
    user_data = await state.get_data()
    await state.clear()
    
    all_candidates = await find_places(settings.GOOGLE_MAPS_API_KEY, user_data['latitude'], user_data['longitude'], user_data['radius'], min_rating)
    final_places = [p for p in all_candidates if p['rating'] <= max_rating]

    if not final_places:
        await analytics.track_empty_result()
        await bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. üôÅ", reply_markup=inline_keyboards.get_new_search_keyboard())
    else:
        await analytics.track_search_request()
        await bot.send_message(chat_id, "–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:")
        for i, place in enumerate(final_places[:3], 1):
            distance = calculate_distance(user_data['latitude'], user_data['longitude'], place['lat'], place['lng'])
            bearing = calculate_bearing(user_data['latitude'], user_data['longitude'], place['lat'], place['lng'])
            direction = bearing_to_direction(bearing)
            text = (f"<b>{i}. {place['name']}</b>\nüçΩÔ∏è {place['main_type']}\n‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {place['rating']}\nüìç {distance} –º {direction} –æ—Ç –≤–∞—Å\nüó∫Ô∏è –ê–¥—Ä–µ—Å: {place['address']}")
            await bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=inline_keyboards.get_google_maps_link_button(place, distance, direction))
            # –ï—Å–ª–∏ —É –∑–∞–≤–µ–¥–µ–Ω–∏—è –µ—Å—Ç—å —Å–∞–º–º–∞—Ä–∏ –æ—Ç Google, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if place.get('summary'):
            text += f"\n\nüí¨ *–û—Ç Google:* ¬´{place['summary']}¬ª"
        await bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫?", reply_markup=inline_keyboards.get_new_search_keyboard())


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è ---
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await analytics.track_user(message.from_user.id)
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {message.from_user.id} ({message.from_user.full_name})") # –ª–æ–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await state.clear()
    location_button = KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)
    keyboard = ReplyKeyboardMarkup(keyboard=[[location_button]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø "–ì–∏–¥ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º". –ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º —Å –≤–∞–º–∏.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.', reply_markup=keyboard)
    await state.set_state(SearchSteps.waiting_for_location)

@router.message(Command(commands=['feedback']))
async def cmd_feedback(message: Message, state: FSMContext):
    await analytics.track_feedback_request()
    await state.set_state(FeedbackState.waiting_for_feedback)
    await message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º–∏ –º—ã—Å–ª—è–º–∏! –ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –∏–ª–∏, –º–æ–∂–µ—Ç, –≤—ã –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É? –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")

@router.message(FeedbackState.waiting_for_feedback)
async def process_feedback(message: Message, state: FSMContext, bot: Bot):
    await bot.forward_message(chat_id=settings.ADMIN_ID, from_chat_id=message.chat.id, message_id=message.message_id)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –í—ã –æ—á–µ–Ω—å –ø–æ–º–æ–≥–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –ª—É—á—à–µ! üëç\n–î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ /start")
    await state.clear()

@router.callback_query(F.data == "new_search")
async def new_search_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete()
    await cmd_start(callback.message, state)

@router.message(SearchSteps.waiting_for_location, F.location)
async def get_location(message: Message, state: FSMContext):
    await state.update_data(latitude=message.location.latitude, longitude=message.location.longitude)
    await message.answer("–°–ø–∞—Å–∏–±–æ!", reply_markup=ReplyKeyboardRemove())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:", reply_markup=inline_keyboards.get_radius_keyboard())
    await state.set_state(SearchSteps.waiting_for_radius)

@router.callback_query(SearchSteps.waiting_for_radius, F.data.startswith('radius_'))
async def get_radius(callback: types.CallbackQuery, state: FSMContext):
    radius = int(callback.data.split('_')[1])
    await analytics.track_feature_use("radius", radius)
    await state.update_data(radius=radius)
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ. –ö–∞–∫–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=inline_keyboards.get_rating_keyboard())
    await state.set_state(SearchSteps.waiting_for_rating)
    await callback.answer()

@router.callback_query(SearchSteps.waiting_for_rating, F.data.startswith('rating_'))
async def get_rating_from_button(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback.message.edit_text("–ò—â—É –ª—É—á—à–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –≤–∞—Å... üïµÔ∏è‚Äç‚ôÇÔ∏è")
    parts = callback.data.split('_')
    rating_range = f"{parts[1]}_{parts[2]}"
    await analytics.track_feature_use("rating", rating_range)
    await process_and_send_results(callback.message.chat.id, bot, state, float(parts[1]), float(parts[2]))
    await callback.answer()

@router.callback_query(SearchSteps.waiting_for_radius, F.data == 'manual_radius_input')
async def ask_for_manual_radius(callback: types.CallbackQuery, state: FSMContext):
    await analytics.track_feature_use("radius", "manual")
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–¥–∏—É—Å –≤ –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 350, –º–∞–∫—Å. 5000).")
    await state.set_state(SearchSteps.waiting_for_manual_radius)
    await callback.answer()

@router.message(SearchSteps.waiting_for_manual_radius)
async def get_manual_radius(message: Message, state: FSMContext):
    try:
        radius = int(message.text)
        if not 1 <= radius <= 5000: raise ValueError("–†–∞–¥–∏—É—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        await state.update_data(radius=radius)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ. –ö–∞–∫–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=inline_keyboards.get_rating_keyboard())
        await state.set_state(SearchSteps.waiting_for_rating)
    except (ValueError, TypeError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5000.")

@router.callback_query(SearchSteps.waiting_for_rating, F.data == 'manual_rating_input')
async def ask_for_manual_rating(callback: types.CallbackQuery, state: FSMContext):
    await analytics.track_feature_use("rating", "manual")
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3.2 –∏–ª–∏ 4).")
    await state.set_state(SearchSteps.waiting_for_manual_rating)
    await callback.answer()

@router.message(SearchSteps.waiting_for_manual_rating)
async def get_manual_rating(message: Message, state: FSMContext, bot: Bot):
    try:
        min_rating = float(message.text.replace(',', '.'))
        if not 1.0 <= min_rating <= 5.0: raise ValueError("–†–µ–π—Ç–∏–Ω–≥ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        loading_message = await message.answer("–ò—â—É –ª—É—á—à–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –≤–∞—Å... üïµÔ∏è‚Äç‚ôÇÔ∏è")
        await process_and_send_results(message.chat.id, bot, state, min_rating, 5.0)
        await loading_message.delete()
    except (ValueError, TypeError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1.0 –¥–æ 5.0.")

@router.message(SearchSteps.waiting_for_location)
async def incorrect_location(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é'...")
