from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from bot.keyboards import inline_keyboards
from bot.utils.google_maps_api import find_places
from bot.config import settings

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM)
class SearchSteps(StatesGroup):
    waiting_for_location = State()
    waiting_for_radius = State()
    waiting_for_rating = State()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –Ω–æ–≤–æ–º —Å—Ç–∞—Ä—Ç–µ
    
    location_button = KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)
    keyboard = ReplyKeyboardMarkup(keyboard=[[location_button]], resize_keyboard=True)
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø \"–ì–∏–¥ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º\". –ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º —Å –≤–∞–º–∏.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
        reply_markup=keyboard
    )
    await state.set_state(SearchSteps.waiting_for_location)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–ª–±—ç–∫–æ–≤ –ø–æ —à–∞–≥–∞–º FSM ---

@router.message(SearchSteps.waiting_for_location, F.location)
async def get_location(message: Message, state: FSMContext):
    """–õ–æ–≤–∏—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await state.update_data(
        latitude=message.location.latitude,
        longitude=message.location.longitude
    )
    
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:",
        reply_markup=inline_keyboards.get_radius_keyboard()
    )
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    await message.answer("...", reply_markup=ReplyKeyboardRemove(), show_alert=False)

    await state.set_state(SearchSteps.waiting_for_radius)

@router.callback_query(SearchSteps.waiting_for_radius, F.data.startswith('radius_'))
async def get_radius(callback: types.CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏—Ç —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏."""
    radius = int(callback.data.split('_')[1])
    await state.update_data(radius=radius)
    
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ. –ö–∞–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=inline_keyboards.get_rating_keyboard()
    )
    await state.set_state(SearchSteps.waiting_for_rating)
    await callback.answer()

@router.callback_query(SearchSteps.waiting_for_rating, F.data.startswith('rating_'))
async def get_rating_and_search(callback: types.CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏—Ç —Ä–µ–π—Ç–∏–Ω–≥, –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    min_rating = float(callback.data.split('_')[1])
    await state.update_data(min_rating=min_rating)
    
    user_data = await state.get_data()
    await state.clear()
    
    await callback.message.edit_text("–ò—â—É –ª—É—á—à–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –≤–∞—Å... üïµÔ∏è‚Äç‚ôÇÔ∏è")
    
    places = await find_places(
        api_key=settings.GOOGLE_MAPS_API_KEY,
        lat=user_data['latitude'],
        lon=user_data['longitude'],
        radius=user_data['radius'],
        min_rating=min_rating
    )
    
    await callback.message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ò—â—É..."
    
    if not places:
        await callback.message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. üôÅ\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞. –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ /start"
        )
    else:
        await callback.message.answer("–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:")
        for place in places:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è
            text = (
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {place['name']}\n"
                f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> ‚≠êÔ∏è {place['rating']}\n"
                f"<b>–ê–¥—Ä–µ—Å:</b> {place['address']}"
            )
        await callback.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=inline_keyboards.get_google_maps_link_button(
                place_id=place['place_id'], 
                place_name=place['name']
            )
        )
        await callback.message.answer("–•–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫? /start")

    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ---

@router.message(SearchSteps.waiting_for_location)
async def incorrect_location(message: Message):
    """–°–æ–æ–±—â–∞–µ—Ç –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –≤–º–µ—Å—Ç–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ."""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.")
