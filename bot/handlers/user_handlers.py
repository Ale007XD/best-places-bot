from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å
from bot.utils.geospatial import calculate_distance, calculate_bearing, bearing_to_direction
from bot.keyboards import inline_keyboards
from bot.utils.google_maps_api import find_places
from bot.config import settings

router = Router()

# ... –ö–ª–∞—Å—Å SearchSteps –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
class SearchSteps(StatesGroup):
    waiting_for_location = State()
    waiting_for_radius = State()
    waiting_for_rating = State()

# ... cmd_start, get_location, get_radius –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    location_button = KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)
    keyboard = ReplyKeyboardMarkup(keyboard=[[location_button]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø "–ì–∏–¥ –ø–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º". –ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º —Å –≤–∞–º–∏.\n\n'
        '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.',
        reply_markup=keyboard
    )
    await state.set_state(SearchSteps.waiting_for_location)


@router.message(SearchSteps.waiting_for_location, F.location)
async def get_location(message: Message, state: FSMContext):
    await state.update_data(
        latitude=message.location.latitude,
        longitude=message.location.longitude
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ!", reply_markup=ReplyKeyboardRemove())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:", reply_markup=inline_keyboards.get_radius_keyboard())
    await state.set_state(SearchSteps.waiting_for_radius)


@router.callback_query(SearchSteps.waiting_for_radius, F.data.startswith('radius_'))
async def get_radius(callback: types.CallbackQuery, state: FSMContext):
    radius = int(callback.data.split('_')[1])
    await state.update_data(radius=radius)
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ. –ö–∞–∫–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=inline_keyboards.get_rating_keyboard()
    )
    await state.set_state(SearchSteps.waiting_for_rating)
    await callback.answer()


@router.callback_query(SearchSteps.waiting_for_rating, F.data.startswith('rating_'))
async def get_rating_and_search(callback: types.CallbackQuery, state: FSMContext):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –≤—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É.
    """
    parts = callback.data.split('_')
    min_rating = float(parts[1])
    max_rating = float(parts[2])
    
    user_data = await state.get_data()
    await state.clear()
    
    await callback.message.edit_text("–ò—â—É –ª—É—á—à–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –≤–∞—Å... üïµÔ∏è‚Äç‚ôÇÔ∏è")
    
    all_candidates = await find_places(
        api_key=settings.GOOGLE_MAPS_API_KEY,
        lat=user_data['latitude'],
        lon=user_data['longitude'],
        radius=user_data['radius'],
        min_rating=min_rating
    )
    
    final_places = [p for p in all_candidates if p['rating'] <= max_rating]

    await callback.message.delete()
    
    if not final_places:
        await callback.message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. üôÅ\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω. –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ /start"
        )
    else:
        await callback.message.answer("–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:")
        
        for i, place in enumerate(final_places[:3], 1):
            # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –ö–ê–†–¢–û–ß–ö–ò ---
            distance = calculate_distance(
                lat1=user_data['latitude'], lon1=user_data['longitude'],
                lat2=place['lat'], lon2=place['lng']
            )
            bearing = calculate_bearing(
                lat1=user_data['latitude'], lon1=user_data['longitude'],
                lat2=place['lat'], lon2=place['lng']
            )
            direction = bearing_to_direction(bearing)
            
            # –°–æ–±–∏—Ä–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            text = (
                f"<b>{i}. {place['name']}</b>\n"
                f"üçΩÔ∏è {place['main_type']}\n"
                f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {place['rating']}\n"
                f"üìç {distance} –º {direction} –æ—Ç –≤–∞—Å\n"
                f"üó∫Ô∏è –ê–¥—Ä–µ—Å: {place['address']}"
            )
            
            await callback.message.answer(
                text,
                parse_mode="HTML",
                reply_markup=inline_keyboards.get_google_maps_link_button(
                    place_id=place['place_id'], 
                    place_name=place['name']
                )
            )
            
        await callback.message.answer("–•–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫? /start")

    await callback.answer()


@router.message(SearchSteps.waiting_for_location)
async def incorrect_location(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é', —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º.")
